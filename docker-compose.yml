version: '3'

volumes:
  mysql_data:
    driver: local
  mongo_data:
    driver: local
  redis_data:
    driver: local
  locust:
    driver: local

networks: 
  app:
    driver: bridge  

services:
  api:
    build: .
    restart: always
    networks: 
      - app
    depends_on:
      - kafka
      - mongodb
      - redis
      - mysql
    ports:
      - 5000:5000
    volumes:
      - ./src:/usr/src/app/src
    command: npm run dev:api

  worker:
    build: .
    restart: always
    networks: 
      - app
    depends_on:
      - kafka
      - mongodb
      - redis
      - mysql
    volumes:
      - ./src:/usr/src/app/src
    command: npm run dev:worker
    
  kafka:
    image: confluentinc/cp-kafka:latest
    networks: 
      - app
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
    restart: always
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    networks: 
      - app
    restart: always
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafdrop:
    image: obsidiandynamics/kafdrop:latest
    networks: 
      - app
    depends_on:
      - kafka
    ports:
      - 19000:9000
    environment:
      KAFKA_BROKERCONNECT: kafka:29092

  mysql:
    image: mysql:5.7
    restart: always
    networks: 
      - app
    environment:
      MYSQL_DATABASE: 'db'
      MYSQL_USER: 'user'
      MYSQL_PASSWORD: 'sqlP4SS'
      MYSQL_ROOT_PASSWORD: 'RO0TsqlP4SS'
    ports:
      - '3306:3306'
    volumes:
      - mysql_data:/var/lib/mysql

  mongodb:
    image: mongo:4.4
    networks: 
      - app
    restart: always
    ports:
      - '27017:27017'
    volumes: 
      - mongo_data:/data/db

  redis:
    image: redis
    networks: 
      - app
    restart: always
    ports:
      - 6380:6379
    volumes: 
      - redis_data:/data

  locust_master:
    image: locustio/locust
    working_dir: /mnt/locust
    restart: always
    depends_on:
      - api
    networks: 
      - app
    ports:
      - "8089:8089"
    volumes:
      - ./locust:/mnt/locust
    command: -f /mnt/locust/locustfile.py --master

  locust_worker:
    image: locustio/locust
    restart: always
    networks: 
      - app
    working_dir: /mnt/locust
    depends_on:
      - locust_master
    volumes:
      - ./locust:/mnt/locust
    command: -f /mnt/locust/locustfile.py --worker --master-host locust_master
